<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UserManagement.Api</name>
    </assembly>
    <members>
        <member name="T:UserManagement.Api.Authorization.Basic.BasicAuthenticationHandler">
            <summary>
            Authentication Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Authorization.Basic.BasicAuthenticationHandler.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions},Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Encodings.Web.UrlEncoder,Microsoft.AspNetCore.Authentication.ISystemClock)">
            <summary>
            Constructor
            </summary>
            <param name="options"></param>
            <param name="logger"></param>
            <param name="encoder"></param>
            <param name="clock"></param>
        </member>
        <member name="M:UserManagement.Api.Authorization.Basic.BasicAuthenticationHandler.HandleAuthenticateAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.Base.BaseController">
            <summary>
            Base Controller
            </summary>
        </member>
        <member name="T:UserManagement.Api.Controllers.Common.TemplatesController">
            <summary>
            Budgets Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Common.TemplatesController.#ctor(Service.Services.Common.Template.ITemplateService,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Common.TemplatesController.GetByCodeAsync">
            <summary>
            Get By Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Common.TemplatesController.GetEmptyByCodeAsync">
            <summary>
            Get By Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Common.TemplatesController.GetEmptyImageByCode">
            <summary>
            Get By Id 
            </summary>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.Hr.EmployeesController">
            <summary>
             Employees Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.#ctor(Service.Services.Hr.Employee.IEmployeeService,Service.Services.Validators.Services.Employee.IEmployeeValidationService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.GetAsync(System.Guid)">
            <summary>
            Get By Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.GetEmployeeCountAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.GetEditAsync(System.Guid)">
            <summary>
            Get By Id For Edit
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.GetViewAsync(System.Guid)">
            <summary>
            Get By Id For View
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.CheckNationalIdAsync(System.String,System.Guid)">
            <summary>
            Check If National Id Is Available Or Not
            </summary>
            <param name="nationalId"></param>
            <param name="employeeId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.CheckFileNumberAsync(System.String,System.Guid)">
            <summary>
            Check If File Number Is Available Or Not
            </summary>
            <param name="fileNumber"></param>
            <param name="employeeId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.CheckEmailAsync(System.String,System.Guid)">
            <summary>
            Check If Email Is Available Or Not
            </summary>
            <param name="email"></param>
            <param name="employeeId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.GetEmployeeIdsByUnitIdAsync(System.String)">
            <summary>
            Get employee Ids by Unit Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.GetUnitManagerAsync(System.String,System.Nullable{Entities.Enum.UnitType})">
            <summary>
            Get employee Ids by Unit Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.GetAllAsync">
            <summary>
            Get All 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.GetPaged(Domain.DTO.Base.BaseParam{Domain.DTO.Hr.Employee.Parameters.EmployeeFilter})">
            <summary>
            GetAll Data paged
            </summary>
            <param name="filter">Filter responsible for search and sort</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.GetDropDown(Domain.DTO.Base.BaseParam{Domain.DTO.Base.SearchCriteriaFilter})">
            <summary>
            For Search
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.GetDropDownForHrAsync(Domain.DTO.Base.BaseParam{Domain.DTO.Base.SearchCriteriaFilter})">
            <summary>
            Get Drop Down For Vaccination And Hr Systems
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.PostAsync(Domain.DTO.Hr.Employee.AddEmployeeDto)">
            <summary>
            Add 
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.EmployeesController.Update(Domain.DTO.Hr.Employee.AddEmployeeDto)">
            <summary>
            Update  
            </summary>
            <param name="model">Object content</param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.Hr.NationalitiesController">
            <summary>
            Nationalities Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.NationalitiesController.#ctor(Service.Services.Hr.Nationality.INationalityService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.NationalitiesController.GetAsync(System.Int64)">
            <summary>
            Get By Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.NationalitiesController.GetEdit(System.Int64)">
            <summary>
            Get By Id For Edit
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.NationalitiesController.GetAllAsync">
            <summary>
            Get All 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.NationalitiesController.GetPaged(Domain.DTO.Base.BaseParam{Domain.DTO.Hr.Nationality.Parameters.NationalityFilter})">
            <summary>
            GetAll Data paged
            </summary>
            <param name="filter">Filter responsible for search and sort</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.NationalitiesController.PostAsync(Domain.DTO.Hr.Nationality.AddNationalityDto)">
            <summary>
            Add 
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.NationalitiesController.Update(Domain.DTO.Hr.Nationality.AddNationalityDto)">
            <summary>
            Update  
            </summary>
            <param name="model">Object content</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.NationalitiesController.Remove(System.Int64)">
            <summary>
            Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.NationalitiesController.DeleteSoftAsync(System.Int64)">
            <summary>
            Soft Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.Hr.UnitsController">
            <summary>
            Units Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.#ctor(Service.Services.Hr.Unit.IUnitService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.GetAsync(System.Int64)">
            <summary>
            Get By Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.GetUnitsCountAsync">
            <summary>
            Get Count For Dashboard 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.TransformAsync">
            <summary>
            Transform Name To Full Name
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.GetUnitOrTeamAsync(System.Guid,Entities.Enum.UnitType)">
            <summary>
            Get Unit Or Team By Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.GetEdit(System.Int64)">
            <summary>
            Get By Id For Edit
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.GetUnitsWithChildren">
            <summary>
            Get Unit With Children 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.GetSectionsByEmployeeSectionIdAsync(System.Guid)">
            <summary>
            Get Sections In Department
            And Teams of Logged In Section Manager ( The Teams Under That Section )
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.GetAllAsync">
            <summary>
            Get All 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.GetPaged(Domain.DTO.Base.BaseParam{Domain.DTO.Hr.Unit.Parameters.UnitFilter})">
            <summary>
            GetAll Data paged
            </summary>
            <param name="filter">Filter responsible for search and sort</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.GetDropDown(Domain.DTO.Base.BaseParam{Domain.DTO.Base.SearchCriteriaFilter})">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.PostAsync(Domain.DTO.Hr.Unit.AddUnitDto)">
            <summary>
            Add 
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.Update(Domain.DTO.Hr.Unit.AddUnitDto)">
            <summary>
            Update  
            </summary>
            <param name="model">Object content</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.Remove(System.Int64)">
            <summary>
            Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Hr.UnitsController.DeleteSoftAsync(System.Int64)">
            <summary>
            Soft Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.Identity.AccountsController">
            <summary>
            Accounts Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AccountsController.#ctor(Service.Services.Identity.Account.IAccountService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AccountsController.ResetPassword(Domain.DTO.Identity.User.ResetPasswordDto)">
            <summary>
            Reset Password
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.Identity.AppsController">
            <summary>
            App Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.#ctor(Service.Services.Identity.App.IAppService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.GetAppsCountAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.GetAsync(System.Int64)">
            <summary>
            Get By Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.GetEdit(System.Int64)">
            <summary>
            Get By Id For Edit
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.GetByUserIdAsync(System.Int64)">
            <summary>
            Get By User Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.GetByUserAppIdAsync(System.Int64,System.Int64)">
            <summary>
            Get By User And App Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.GetPublicAppsAsync">
            <summary>
            Get By User And App Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.GetAllAsync">
            <summary>
            Get All Apps
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.GetPaged(Domain.DTO.Base.BaseParam{Domain.DTO.Identity.App.Parameters.AppFilter})">
            <summary>
            GetAll Data paged
            </summary>
            <param name="filter">Filter responsible for search and sort</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.GetUserAppsWithNoRoles(Domain.DTO.Identity.App.UserAppRolesDto)">
            <summary>
            GetAll Data paged
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.GetUserAppsWithRoles(Domain.DTO.Identity.App.UserAppRolesDto)">
            <summary>
            GetAll Data paged
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.PostAsync(Domain.DTO.Identity.App.AddAppDto)">
            <summary>
            Add App
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.Update(Domain.DTO.Identity.App.AddAppDto)">
            <summary>
            Update  
            </summary>
            <param name="model">Object content</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.Remove(System.Int64)">
            <summary>
            Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.AppsController.DeleteSoftAsync(System.Int64)">
            <summary>
            Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.Identity.PagesController">
            <summary>
            Pages Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PagesController.#ctor(Service.Services.Identity.Page.IPageService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PagesController.GetPagesCountAsync">
            <summary>
            Get Pages COunt
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PagesController.GetAsync(System.Int64)">
            <summary>
            Get By Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PagesController.GetEdit(System.Int64)">
            <summary>
            Get By Id For Edit
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PagesController.GetByAppIdAsync(System.Int64)">
            <summary>
            Get By App Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PagesController.GetAllAsync">
            <summary>
            Get All 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PagesController.GetPaged(Domain.DTO.Base.BaseParam{Domain.DTO.Identity.Page.Parameters.PageFilter})">
            <summary>
            GetAll Data paged
            </summary>
            <param name="filter">Filter responsible for search and sort</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PagesController.PostAsync(Domain.DTO.Identity.Page.AddPageDto)">
            <summary>
            Add 
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PagesController.Update(Domain.DTO.Identity.Page.AddPageDto)">
            <summary>
            Update  
            </summary>
            <param name="model">Object content</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PagesController.Remove(System.Int64)">
            <summary>
            Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PagesController.DeleteSoftAsync(System.Int64)">
            <summary>
            Soft Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.Identity.PermissionsController">
            <summary>
            Permissions Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PermissionsController.#ctor(Service.Services.Identity.Permission.IPermissionService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PermissionsController.GetAsync(System.Int64)">
            <summary>
            Get By Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PermissionsController.GetEdit(System.Int64)">
            <summary>
            Get By Id For Edit
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PermissionsController.GetAllAsync">
            <summary>
            Get All 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PermissionsController.GetPaged(Domain.DTO.Base.BaseParam{Domain.DTO.Identity.Permission.Parameters.PermissionFilter})">
            <summary>
            GetAll Data paged
            </summary>
            <param name="filter">Filter responsible for search and sort</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PermissionsController.PostAsync(Domain.DTO.Identity.Permission.AddPermissionDto)">
            <summary>
            Add 
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PermissionsController.Update(Domain.DTO.Identity.Permission.AddPermissionDto)">
            <summary>
            Update  
            </summary>
            <param name="model">Object content</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PermissionsController.Remove(System.Int64)">
            <summary>
            Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.PermissionsController.DeleteSoftAsync(System.Int64)">
            <summary>
            Soft Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.Identity.RolesController">
            <summary>
            Role Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.RolesController.#ctor(Service.Services.Identity.Role.IRoleService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.RolesController.GetAsync(System.Int64)">
            <summary>
            Get By Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.RolesController.GetEdit(System.Int64)">
            <summary>
            Get By Id For Edit
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.RolesController.GetByAppIdAsync(System.Int64)">
            <summary>
            Get By App Id
            </summary>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.RolesController.GetUnassignedByAppIdAsync(System.Int64,System.Int64)">
            <summary>
            Get Unassigned By App Id And User Id
            </summary>
            <param name="appId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.RolesController.GetAssignedByAppIdAsync(System.Int64,System.Int64)">
            <summary>
            Get Assigned By App Id And User Id
            </summary>
            <param name="appId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.RolesController.GetAllAsync">
            <summary>
            Get All Roles
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.RolesController.GetPaged(Domain.DTO.Base.BaseParam{Domain.DTO.Identity.Role.Parameters.RoleFilter})">
            <summary>
            GetAll Data paged
            </summary>
            <param name="filter">Filter responsible for search and sort</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.RolesController.Post(Domain.DTO.Identity.Role.AddRoleDto)">
            <summary>
            Add Role
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.RolesController.Update(Domain.DTO.Identity.Role.AddRoleDto)">
            <summary>
            Update  
            </summary>
            <param name="model">Object content</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.RolesController.Remove(System.Int64)">
            <summary>
            Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.RolesController.DeleteSoftAsync(System.Int64)">
            <summary>
            Soft Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.Identity.UserAppsController">
            <summary>
            User Apps Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserAppsController.#ctor(Service.Services.Identity.UserApp.IUserAppService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserAppsController.GetByIdAsync(System.Int64)">
            <summary>
            Get User Apps By  Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserAppsController.GetEdit(System.Int64)">
            <summary>
            Get By Id For Edit
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserAppsController.GetByUserIdAsync(System.Int64)">
            <summary>
            Get User Apps By User Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserAppsController.AddUsersToAppAsync(System.Collections.Generic.List{Domain.DTO.Identity.UserApp.AddUserAppDto})">
            <summary>
            Add List Of Users To App
            </summary>
            <param name="dtos"></param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.Identity.UserClaimsController">
            <summary>
            User Claims Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserClaimsController.#ctor(Service.Services.Identity.UserClaim.IUserClaimService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserClaimsController.GetByUserIdAsync(System.Int64,System.String,System.String)">
            <summary>
            Get By User Id 
            </summary>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.Identity.UserRolesController">
            <summary>
             User Roles Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserRolesController.#ctor(Service.Services.Identity.UserRole.IUserRoleService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserRolesController.GetByIdAsync(System.Int64)">
            <summary>
            Get By User Id
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserRolesController.GetEdit(System.Int64)">
            <summary>
            Get By Id For Edit
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserRolesController.GetByUserIdAsync(System.Int64,System.Int64)">
            <summary>
            Get By User Id For Other Systems
            </summary>
            <param name="userId"></param>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserRolesController.GetAllAsync">
            <summary>
            Get All Roles
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserRolesController.Post(Domain.DTO.Identity.UserRole.AddUserRoleDto)">
            <summary>
            Add Role
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserRolesController.AddMulitpleRolesAsync(Domain.DTO.Identity.UserRole.AddMultipleRolesDto)">
            <summary>
            Add Multible Roles
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserRolesController.Update(Domain.DTO.Identity.UserRole.AddUserRoleDto)">
            <summary>
            Update  
            </summary>
            <param name="model">Object content</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserRolesController.Remove(System.Int64)">
            <summary>
            Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UserRolesController.DeleteUserRole(Domain.DTO.Identity.UserRole.AddUserRoleDto)">
            <summary>
            Remove  by id
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.Identity.UsersController">
            <summary>
            Users Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.#ctor(Service.Services.Identity.User.IUserService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.GetByIdAsync(System.Int64)">
            <summary>
            Get By Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.GetEdit(System.Int64)">
            <summary>
            Get By Id For Edit
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.GetByAppIdAsync(System.Int64)">
            <summary>
            Get By App Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.GetProfileAsync(System.Int64)">
            <summary>
            Get Logged In User Profile
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.GetUserCountAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.GetAllAsync">
            <summary>
            Get All Users
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.CheckNationalIdAsync(System.String,System.Int64)">
            <summary>
            Check If National Id Is Available Or Not
            </summary>
            <param name="nationalId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.CheckEmailAsync(System.String,System.Int64)">
            <summary>
            Check If Email Is Available Or Not
            </summary>
            <param name="email"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.GetPaged(Domain.DTO.Base.BaseParam{Domain.DTO.Identity.User.Parameters.UserFilter})">
            <summary>
            GetAll Data paged
            </summary>
            <param name="filter">Filter responsible for search and sort</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.GetByAppIdPaged(Domain.DTO.Base.BaseParam{Domain.DTO.Identity.User.Parameters.UserSearchCriteriaFilter})">
            <summary>
            GetAll Data paged
            </summary>
            <param name="filter">Filter responsible for search and sort</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.Post(Domain.DTO.Identity.User.UploadProfileImageDto)">
            <summary>
            Upload Image
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.Post(Domain.DTO.Identity.User.AddUserDto)">
            <summary>
            Add User
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.ChangePasswordAsync(Domain.DTO.Identity.User.ChangePasswordDto)">
            <summary>
            Change Password
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.Update(Domain.DTO.Identity.User.AddUserDto)">
            <summary>
            Update  
            </summary>
            <param name="model">Object content</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.Remove(System.Int64)">
            <summary>
            Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.DeleteSoftAsync(System.Int64)">
            <summary>
            Soft Remove  by id
            </summary>
            <param name="id">PK</param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.Identity.UsersController.RemoveByUserAppId(System.Int64,System.Int64)">
            <summary>
            Remove  by id
            </summary>
            <param name="id">PK</param>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController">
            <summary>
            External Employees Controller Used By Other Services
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.#ctor(Service.Services.Hr.Employee.Integration.IExternalEmployeeService)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.GetAsync(System.Guid)">
            <summary>
            Get Employees By Id ( used For Omsgd Services )
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.GetAllAsync">
            <summary>
            Get All ( used For Self Services )
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.GetAllMurasalatAsync">
            <summary>
            Get All ( used For Self Services )
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.GetEmployeeIdsByUnitIdAsync(System.String,System.Boolean)">
            <summary>
            Get employee Ids by Unit Id 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.GetByAppCodeAsync(System.String)">
            <summary>
            Get Employees By App Code ( used For Stock )
            </summary>
            <param name="appCode"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.GetEmployeePhonesByIdsAsync(System.Collections.Generic.List{Domain.DTO.Integration.ItHelpDesk.Ticket.TicketSmsDto})">
            <summary>
            Get Employee Phone Numbers Using List Of Ids ( Used In Omsgd Services )
            </summary>
            <param name="dtos"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.GetUnitManagersPhonesByUnitIdsAsync(System.Collections.Generic.List{Domain.DTO.Integration.ItHelpDesk.Ticket.TicketSmsDto})">
            <summary>
            Get Unit Managers Phones Numbers Using List Of Unit Or Team Ids ( Used In Omsgd Services )
            </summary>
            <param name="dtos"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.GetEmployeesByUnitIdAsync(System.String)">
            <summary>
            Get Employees By UnitId Or Team Id ( used For Omsgd Services )
            </summary>
            <param name="unitId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.GetEmployeesPhonesByRoleCodeAsync(System.String)">
            <summary>
            Get Employees Phones By Role Code( used For Legal Affairs)
            </summary>
            <param name="roleCode"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.GetUnitManagerEmail(System.String)">
            <summary>
            Get Manager Email by unit id( used For OMSGD Projects)
            </summary>
            <param name="unitId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.GetEmployeePhoneByIdAsync(System.String)">
            <summary>
            Get Employee Phone By Id( used For Legal Affairs)
            </summary>
            <param name="employeeId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.GetByRoleCodeAsync(System.String)">
            <summary>
            Get Employees  By Role Code( used For Legal Affairs)
            </summary>
            <param name="roleCode"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalEmployeesController.GetDropDown(Domain.DTO.Base.BaseParam{Domain.DTO.Base.SearchCriteriaFilter})">
            <summary>
            For Search
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalUnitsController">
            <summary>
            External Units Controller Used By Other Services
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalUnitsController.#ctor(Service.Services.Hr.Unit.Integration.IExternalUnitService)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalUnitsController.GetUnitParentAsync(System.Guid)">
            <summary>
            Get Unit Parent
            Used In Stock Management
            </summary>
            <param name="childId"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalUnitsController.GetDropDownForDepartmentAsync(Domain.DTO.Base.BaseParam{Domain.DTO.Base.SearchCriteriaFilter})">
            <summary>
            Get (Departments )Drop Down Paged
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalUnitsController.GetDropDownAsync(Domain.DTO.Base.BaseParam{Domain.DTO.Base.SearchCriteriaFilter})">
            <summary>
            Get Drop Down Paged
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalUnitsController.GetUnitsByIdsAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Get Units By Ids (Used In Stock)
            </summary>
            <param name="unitIds"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Hr.ExternalUnitsController.GetDropDownForEdit(Domain.DTO.Base.BaseParam{Domain.DTO.Base.SearchCriteriaFilter})">
            <summary>
            Ge All Units
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.IntegrationControllers.Identity.ExternalAppsController">
            <summary>
            App Controller
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Identity.ExternalAppsController.#ctor(Service.Services.Identity.App.Integration.IExternalAppService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Identity.ExternalAppsController.GetLoggedUserAppsAsync">
            <summary>
            Get Current Logged In User Apps
            </summary>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Controllers.IntegrationControllers.Identity.ExternalRolesController">
            <summary>
            External Roles Controller Used By Other Services
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Identity.ExternalRolesController.#ctor(Service.Services.Identity.Role.Integration.IExternalRoleService)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:UserManagement.Api.Controllers.IntegrationControllers.Identity.ExternalRolesController.GetByAppIdAsync(System.Int64)">
            <summary>
            Get By App Id
            </summary>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Extensions.ConfigureExtension">
            <summary>
            Pipeline Extensions
            </summary>
        </member>
        <member name="M:UserManagement.Api.Extensions.ConfigureExtension.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            General Configuration Method
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Extensions.ConfigureExtension.ConfigureCors(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configure Cors
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:UserManagement.Api.Extensions.ConfigureExtension.SwaggerConfig(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            User Swagger
            </summary>
            <param name="app"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:UserManagement.Api.Extensions.ConfigureServiceExtension">
            <summary>
            Dependency Extensions
            </summary>
        </member>
        <member name="M:UserManagement.Api.Extensions.ConfigureServiceExtension.RegisterServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Register Extensions
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:UserManagement.Api.Extensions.ConfigureServiceExtension.RegisterDbContext(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add DbContext
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:UserManagement.Api.Extensions.ConfigureServiceExtension.ConfigureAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configure Authentication With Identity Server
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:UserManagement.Api.Extensions.ConfigureServiceExtension.ConfigureAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure Authorization 
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:UserManagement.Api.Extensions.ConfigureServiceExtension.RegisterAutoMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            register auto-mapper
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:UserManagement.Api.Extensions.ConfigureServiceExtension.RegisterIntegrationRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            register Integration Repositories
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:UserManagement.Api.Extensions.ConfigureServiceExtension.RegisterValidators(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Register Business Validators
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:UserManagement.Api.Extensions.ConfigureServiceExtension.RegisterCores(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Register Main Core
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:UserManagement.Api.Program">
            <summary>
            Kick Off
            </summary>
        </member>
        <member name="P:UserManagement.Api.Program.Configuration">
            <summary>
            Configuration Properties
            </summary>
        </member>
        <member name="M:UserManagement.Api.Program.Main(System.String[])">
            <summary>
            Entry Point
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:UserManagement.Api.Program.CreateHostBuilder(System.String[])">
            <summary>
            Build Web Host
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:UserManagement.Api.Startup">
            <summary>
            Start Up Class
            </summary>
        </member>
        <member name="M:UserManagement.Api.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:UserManagement.Api.Startup.Configuration">
            <summary>
            Public Configuration Property
            </summary>
        </member>
        <member name="M:UserManagement.Api.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure Dependencies
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:UserManagement.Api.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Configure Pipeline
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
